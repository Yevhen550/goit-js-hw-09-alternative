{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAC9BC,EAAYF,SAASC,cAAc,UACnCE,EAAQH,SAASC,cAAc,kBAC/BG,EAAOJ,SAASC,cAAc,iBAC9BI,EAASL,SAASC,cAAc,mBA+CtC,SAASK,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,aAAY,WACNH,EACFF,EAAQ,CAAEH,SAAUA,EAAUS,MAAOR,IAErCG,EAAO,CAAEJ,SAAUA,EAAUS,MAAOR,G,GAErCA,E,IAtDPT,EAAKkB,MAAMC,QAAU,cAWrBhB,EAAUiB,iBAAiB,SAE3B,SAAqBC,GAGnB,GAFAA,EAAGC,iBAEiB,KAAhBlB,EAAMmB,OAA+B,KAAflB,EAAKkB,OAAiC,KAAjBjB,EAAOiB,MACpD,OAAOC,EAAA1B,GAAS2B,OAAOC,QAAQ,6BAC1B,IAAKtB,EAAMmB,MAAQ,IAAMlB,EAAKkB,MAAQ,IAAMjB,EAAOiB,OAAS,EACjE,OAAOC,EAAA1B,GAAS2B,OAAOC,QACpB,oEAILnB,EAAc,EAAGH,EAAMmB,OACpBI,MAAK,SAAAC,G,IAAGpB,EAAQoB,EAARpB,SAAUqB,EAAKD,EAALX,MACjBO,EAAA1B,GAAS2B,OAAOK,QAAQ,uBAAwCC,OAAfvB,EAAS,QAAYuB,OAANF,EAAM,M,IAEvEG,OAAM,SAAAJ,G,IAAGpB,EAAQoB,EAARpB,SAAUyB,EAAKL,EAALX,MAClBO,EAAA1B,GAAS2B,OAAOS,QAAQ,sBAAuCH,OAAfvB,EAAS,QAAYuB,OAANE,EAAM,M,IAIzE,IADA,IAAIE,GAAc/B,EAAMmB,QAASlB,EAAKkB,MAC7Ba,EAAI,EAAGA,GAAK9B,EAAOiB,MAAOa,GAAK,EACtC7B,EAAc6B,EAAI,EAAGD,GAClBR,MAAK,SAAAC,G,IAAGpB,EAAQoB,EAARpB,SAAU6B,EAAKT,EAALX,M,OACjBO,EAAA1B,GAAS2B,OAAOK,QAAQ,qBAAoCC,OAAfvB,EAAS,QAAYuB,OAANM,EAAM,M,IAEnEL,OAAM,SAAAJ,G,IAAGpB,EAAQoB,EAARpB,SAAU8B,EAAKV,EAALX,M,OAClBO,EAAA1B,GAAS2B,OAAOS,QAAQ,oBAAmCH,OAAfvB,EAAS,QAAYuB,OAANO,EAAM,M,IAErEH,IAAe9B,EAAKkB,K","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst btnSubmit = document.querySelector('button');\nconst delay = document.querySelector('[name=\"delay\"]');\nconst step = document.querySelector('[name=\"step\"]');\nconst amount = document.querySelector('[name=\"amount\"]');\n\nform.style.display = 'inline-grid';\n\n//*****************==========================================================================\n//*\n//*  Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay)\n//*  стільки разів, скільки ввели в поле amount.Під час кожного виклику передай їй\n//*  номер промісу(position), що створюється, і затримку, враховуючи першу затримку(delay),\n//*  введену користувачем, і крок(step).\n//*\n//*****************===========================================================================\n\nbtnSubmit.addEventListener('click', onSubmitBtn);\n\nfunction onSubmitBtn(ev) {\n  ev.preventDefault();\n\n  if (delay.value === '' || step.value === '' || amount.value === '') {\n    return Notiflix.Notify.warning('Please fill in all fields');\n  } else if (+delay.value < 0 || +step.value < 0 || +amount.value <= 0) {\n    return Notiflix.Notify.warning(\n      `Numbers couldn't be negativ, amount field have to be more then 0`\n    );\n  }\n\n  createPromise(1, delay.value)\n    .then(({ position, delay }) => {\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n    .catch(({ position, delay }) => {\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n\n  let delayCount = +delay.value + +step.value;\n  for (let i = 1; i < +amount.value; i += 1) {\n    createPromise(i + 1, delayCount)\n      .then(({ position, delay }) =>\n        Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`)\n      )\n      .catch(({ position, delay }) =>\n        Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`)\n      );\n    delayCount += +step.value;\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setInterval(() => {\n      if (shouldResolve) {\n        resolve({ position: position, delay: delay });\n      } else {\n        reject({ position: position, delay: delay });\n      }\n    }, delay);\n  });\n}\n\n//*==========================================================================================\n//*\n//*   Доповни код функції createPromise таким чином, щоб вона повертала один проміс,\n//*  який виконується або відхиляється через delay часу.Значенням промісу повинен бути об'єкт,\n//*  в якому будуть властивості position і delay зі значеннями однойменних параметрів.\n//*  Використовуй початковий код функції для вибору того, що потрібно зробити з промісом\n//*  - виконати або відхилити.\n//*\n//*===========================================================================================\n"],"names":["$ejkSG","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$btnSubmit","$ce04d3a99e08e73b$var$delay","$ce04d3a99e08e73b$var$step","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$createPromise","position","delay5","Promise","resolve","reject","shouldResolve","Math","random","setInterval","delay","style","display","addEventListener","ev","preventDefault","value","$parcel$interopDefault","Notify","warning","then","param","delay1","success","concat","catch","delay2","failure","delayCount","i","delay3","delay4"],"version":3,"file":"03-promises.df221126.js.map"}